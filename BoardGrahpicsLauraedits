package snakegame;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.Random;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
public class BoardGraphics{
	private int size;
	private Snake snake;
	private JLabel[][] board;
	private gameOverMenu gameOver;
	private SnakePart P1;
	private Random random = new Random();
	
	//private SnakePart P2;
	//private SnakePart P3;
	//private SnakePart P4;

	public BoardGraphics() {
		//sets size of the board to be 50 spaces
		this.size = 50;
		snake = new Snake(4, 0, 1, 0); //snake starts at 4,0 moving right
		P1 = new SnakePart(3,0,1,0,snake);
		//SnakePart P2 = new SnakePart(2,0,1,0,snake);
		//SnakePart P3 = new SnakePart(1,0,1,0,snake);
		//SnakePart P4 = new SnakePart(0,0,1,0,snake);

		//sets up the frame and each of the 50 spaces that the snake can be in
		JFrame frame = new JFrame("Snake"); 
		frame.setLocation(0,  0);
		frame.setSize(10*50, 10*50);
		frame.setVisible(true);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		//listen to keys typed
		frame.setFocusable(true);
		frame.addKeyListener(new KeyListener() {
			@Override
			public void keyPressed(KeyEvent e) {			}

			@Override
			public void keyReleased(KeyEvent e) {			}

			@Override
			public void keyTyped(KeyEvent e) {
				char typedChar = e.getKeyChar();
				if (typedChar == 'a') {
					snake.directionX = -1;
					snake.directionY = 0;
					P1.directionX = -1;
					P1.directionY = 0;
				}
				if (typedChar == 'd') {
					snake.directionX = 1;
					snake.directionY = 0;
					P1.directionX = 1;
					P1.directionY = 0;
				}
				if (typedChar == 'w') {
					snake.directionX = 0;
					snake.directionY = -1;
					P1.directionX = 0;
					P1.directionY = -1;
				}
				if (typedChar == 's') {
					snake.directionX = 0;
					snake.directionY = 1;
					P1.directionX = 0;
					P1.directionY = 1;
				}
			}
		});
		//setup board
		board = new JLabel[size][size];
		for (int i = 0; i < board.length; i++) {
			for (int j = 0; j < board[i].length; j++) {
				board[i][j] = new JLabel(" ");
				board[i][j].setSize(10, 10);
				board[i][j].setLocation(i*10, j*10);
				board[i][j].setBackground(Color.white);
				board[i][j].setOpaque(true);
				frame.add(board[i][j]);
			}
		}
		//set up food
		Food food = new Food(random.nextInt(50), random.nextInt(50));
		board[food.foodx][food.foody].setBackground(Color.BLUE);
		Food food1 = new Food(random.nextInt(50), random.nextInt(50));
		board[food1.foodx][food1.foody].setBackground(Color.BLUE);
		Food food2 = new Food(random.nextInt(50), random.nextInt(50));
		board[food2.foody][food2.foody].setBackground(Color.BLUE);
		Food food3 = new Food(random.nextInt(50), random.nextInt(50));
		board[food3.foody][food3.foody].setBackground(Color.BLUE);
		
		//sets up the "Snake" on the board
		board[snake.x][snake.y].setBackground(Color.green);
		board[P1.x][P1.y].setBackground(Color.green);
		//board[P2.x][P2.y].setBackground(Color.green);
		//board[P3.x][P3.y].setBackground(Color.green);
		//board[P4.x][P4.y].setBackground(Color.green);
		//board[10][10].setBackground(Color.red);
		frame.validate();
		frame.repaint();
		//infinite loop that moves the snake
		move();
		if ((food1.foodx == snake.x && food1.foody == snake.y) ||
				(food.foodx == snake.x && food.foody == snake.y) ||
				(food2.foodx == snake.x && food2.foody == snake.y) ||
				(food3.foodx == snake.x && food3.foody == snake.y)) {
			 snake.next = new SnakePart(snake.x, snake.y, snake.directionX, snake.directionY, snake);
			 P1 = snake.next;
		}
		}

	public void move() {
		while (true) {
			try {
				Thread.sleep(1000);//sleep for that many milliseconds
				int x = snake.x;
				int y = snake.y;
				int oldP1x = P1.x;
				int oldP1y = P1.y;
				int directionX = snake.directionX;
				int directionY = snake.directionY;
				int newX = x + directionX;
				int newY = y + directionY;
				int newP1X = x;
				int newP1Y = y;
				//if out of bounds, show a message
				if (newX >= size || newX < 0 || newY >= size || newY < 0) {
					JOptionPane.showMessageDialog(null, "Game Over", "Snake", JOptionPane.INFORMATION_MESSAGE);
					break;
				}
				
				//update snake's new position
				snake.x = newX;
				snake.y = newY;
				//change color of the board to display new position of snake
				board[newP1X][newP1Y].setBackground(Color.green);
				board[newX][newY].setBackground(Color.green);
				board[oldP1x][oldP1y].setBackground(Color.white);
			
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			//create new snakepart when food
		}
	}
}
